#!/usr/bin/env ruby
require 'simple_nat_edurange'
require 'yaml'

data = YAML.load_file('input.yaml')
players = data["players"]


def prep_nat_instance(players)
  # get nat instance ready
  data = <<data
#!/bin/sh
set -e
set -x
echo "Hello World.  The time is now $(date -R)!" | tee /root/output.txt
curl http://ccdc.boesen.me/edurange.txt > /etc/motd
data
  players.each do |player|
    `rm id_rsa id_rsa.pub`
    `ssh-keygen -t rsa -f id_rsa -q -N ''`
    priv_key = File.open('id_rsa', 'rb').read
    pub_key = File.open('id_rsa.pub', 'rb').read

    player["generated_pub"] = pub_key
    player["generated_priv"] = pub_key

    data += <<data
adduser -m #{player["name"]}
mkdir -p /home/#{player["name"]}/.ssh
echo '#{player["key"]}' >> /home/#{player["name"]}/.ssh/authorized_keys
echo '#{priv_key}' >> /home/#{player["name"]}/.ssh/id_rsa
echo '#{pub_key}' >> /home/#{player["name"]}/.ssh/id_rsa.pub
chmod 600 /home/#{player["name"]}/.ssh/id_rsa
chmod 600 /home/#{player["name"]}/.ssh/authorized_keys
chmod 600 /home/#{player["name"]}/.ssh/id_rsa.pub
chown -R #{player["name"]} /home/#{player["name"]}/.ssh
data
  end
  data
end

def gen_host_software()
  rng = Random.new
  data = <<data
#!/bin/sh
set -e
set -x
echo "Hello World.  The time is now $(date -R)!" | tee /root/output.txt
data

  if (rng.rand(2) == 0)
    data += "\n sudo apt-get install apache2"
  end
  if (rng.rand(2) == 0)
    data += "\n sudo apt-get install vsftpd"
  end
  if (rng.rand(2) == 0)
    data += "\n sudo apt-get install bind9"
  end
  if (rng.rand(2) == 0)
    data += "\n sudo apt-get install telnetd"
  end
  data
end

def gen_player_data(name, player_key)
  data = <<data
#!/bin/sh
set -e
set -x
echo "Hello World.  The time is now $(date -R)!" | tee /root/output.txt

apt-get update
apt-get install nmap

adduser -m #{name}
mkdir -p /home/#{name}/.ssh

key='#{player_key.chomp}'

echo $key >> /home/#{name}/.ssh/authorized_keys
chmod 600 /home/#{name}/.ssh/id_rsa
chmod 600 /home/#{name}/.ssh/authorized_keys
chmod 600 /home/#{name}/.ssh/id_rsa.pub
chown -R #{name} /home/#{name}/.ssh

data
  data
end
ec2 = AWS::EC2::Client.new

vpc = ec2.create_vpc(cidr_block: '10.0.0.0/16')
puts "Created vpc #{vpc}"
p vpc
sleep(6)
vpc = AWS::EC2::VPCCollection.new[vpc[:vpc][:vpc_id]]
puts "Created vpc #{vpc}"

igw = ec2.create_internet_gateway
igw = AWS::EC2::InternetGatewayCollection.new[igw[:internet_gateway][:internet_gateway_id]]
vpc.internet_gateway = igw
#associate IGW with vpc

# Get my keypair
key = AWS::EC2::KeyPairCollection.new['newkey']


# Create Host Subnet
hosts_subnet = vpc.subnets.create('10.0.127.255/17')
host_route_table = vpc.route_tables.create
hosts_subnet.route_table = host_route_table

# Create Nat Subnet
nat_subnet = vpc.subnets.create('10.0.128.0/28')
nat_route_table = vpc.route_tables.create
nat_subnet.route_table = nat_route_table
nat_instance = nat_subnet.instances.create(image_id: 'ami-2e1bc047', key_pair: key, user_data: prep_nat_instance(players))

# Route NAT traffic to internet
nat_route_table.create_route("0.0.0.0/0", { internet_gateway: igw} )

puts "Waiting for NAT instance to spin up..."
sleep(40)
# Route Host traffic to NAT
host_route_table.create_route("0.0.0.0/0", { instance: nat_instance } )

nat_instance.network_interfaces.first.source_dest_check = false
nat_eip = AWS::EC2::ElasticIpCollection.new.create(vpc: true)
nat_instance.associate_elastic_ip nat_eip

vpc.security_groups.first.authorize_ingress(:tcp, 0..64555)

p nat_instance
p nat_eip
p nat_instance.elastic_ip

# Ok, have nat instance and routes set up. Now just create player subnets, create routes to the nat instance, block other player subnets

player_subnets = []
player_cidrs = []
player_instances = []


octet_start = 0
players.each do |player|
  octet_start += 16
  if octet_start > 200
    puts "stopped adding players, too many!"
    break
  end
  player_subnet_cidr = "10.0.128.#{octet_start}/28"
  player_cidrs.push player_subnet_cidr

  player_subnet = vpc.subnets.create(player_subnet_cidr)
  player_subnets.push player_subnet

  player_route_table = vpc.route_tables.create
  player_subnet.route_table = player_route_table

  player_route_table.create_route("0.0.0.0/0", { instance: nat_instance } )
end

puts "Done creating instances/subnets for players."

p player_subnets
p player_cidrs


player_subnets.each do |player_subnet|
  puts "Adding acls for Player subnet: #{player_subnet}"
  player_acl = AWS::EC2::NetworkACLCollection.new.create(vpc: vpc)

  rule_start = 100
  player_cidrs.each do |player_cidr|
    next if player_subnet.cidr_block == player_cidr
    rule_start += 1
    player_acl.create_entry(rule_number: rule_start, action: :deny, protocol: -1, cidr_block: player_cidr, egress: false) 
    rule_start += 1
    player_acl.create_entry(rule_number: rule_start, action: :allow, protocol: -1, cidr_block: '0.0.0.0/0', egress: false)
    rule_start += 1
    player_acl.create_entry(rule_number: rule_start, action: :allow, protocol: -1, cidr_block: '0.0.0.0/0', egress: true)
  end

  player_subnet.network_acl = player_acl
end

players.each_with_index do |player, index|
  player_subnet = player_subnets[index]
  player_instance = player_subnet.instances.create(image_id: 'ami-3bec7952', key_pair: key, user_data: gen_player_data(player["name"], player["generated_pub"]))
  player_instances.push player_instance
end

player_instances.each do |player_instance|
  puts "Player instance: #{player_instance}"
  p player_instance.private_ip_address
end
p player_instances

host_instances = []

# Limit of 20 amis at one time
4.times do
  host_instance = hosts_subnet.instances.create(image_id: 'ami-3bec7952', key_pair: key, user_data: gen_host_software())
  host_instances.push host_instance
end

